const { createCanvas, loadImage } = require('canvas');
const fs = require('fs');
const canvas = createCanvas(400, 400);
const ctx = canvas.getContext('2d');

module.exports.config = {
    name: "baucua",
    version: "1.10.0",
    hasPermission: 0,
    credits: "Ho√†ng Qu√¢n",
    description: "Tr√≤ ch∆°i",
    commandCategory: "games",
    usages: "baucua t√¥m 500",
    cooldowns: 5,
};

const slotItems = ["nai", "b·∫ßu", "g√†", "c√°", "cua", "t√¥m"];
function drawCanvas(winnerNhaCai, coin, winnerNguoiChoi, userWin, nhacai, userChoice, api, threadID, messageID) {
    const slotWidth = 398 / 3; // Width of each slot
    const slotHeight = 411 / 2; // Height of each row (assuming there are 2 rows)
    const imageURL = "https://i.ibb.co/6ZZrLrH/CF225-EDA-E470-4799-AA84-1-EA852-C9-C413.jpg"; // Thay b·∫±ng ƒë∆∞·ªùng d·∫´n c·ªßa ·∫£nh c·ªßa b·∫°n
    loadImage(imageURL).then(img => {
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

        const rowIndexNguoiChoi = Math.floor(winnerNguoiChoi / 3);
        const colIndexNguoiChoi = winnerNguoiChoi % 3;
        const xNguoiChoi = colIndexNguoiChoi * slotWidth;
        const yNguoiChoi = rowIndexNguoiChoi * slotHeight;
        const widthNguoiChoi = slotWidth;
        const heightNguoiChoi = slotHeight;

        const rowIndexNhaCai = Math.floor(winnerNhaCai / 3);
        const colIndexNhaCai = winnerNhaCai % 3;
        const xNhaCai = colIndexNhaCai * slotWidth;
        const yNhaCai = rowIndexNhaCai * slotHeight;
        const widthNhaCai = slotWidth;
        const heightNhaCai = slotHeight;
             //user
         ctx.strokeStyle = userWin ? "green" : "red"; 
        ctx.lineWidth = 5;
        ctx.strokeRect(xNguoiChoi, yNguoiChoi, widthNguoiChoi, heightNguoiChoi);
           //nhacai
        ctx.strokeStyle = nhacai === userChoice ? "green" : "red";
        ctx.lineWidth = 5;
        ctx.strokeRect(xNhaCai, yNhaCai, widthNhaCai, heightNhaCai);

        const imagePath = __dirname + "/cache/baucua/1.jpg";
        const out = fs.createWriteStream(imagePath);
        const stream = canvas.createPNGStream();
        stream.pipe(out);
        out.on("finish", () => {
            // Check the result and send the corresponding result message
            let resultMessage = '';
            if (nhacai === userChoice) {
                // N·∫øu ng∆∞·ªùi ch∆°i th·∫Øng
                resultMessage = `üëÄB·∫°n ƒë√£ th·∫Øng üèÜ\nüíêB·∫°n nh·∫≠n ƒë∆∞·ª£c ${coin} ƒë√¥\üåºnT·ª´ s·ªë ti·ªÅn c∆∞·ª£c.\nüê∏B·∫°n ch·ªçn: ${userChoice}\nüê≥Nh√† c√°i v·ªÅ 2 k·∫øt qu·∫£\nüåàTrong ƒë√≥ c√≥ : ${slotItems[winnerNhaCai]}`;
            } else {
                // N·∫øu nh√† c√°i th·∫Øng
                resultMessage = `üëÄB·∫°n ƒë√£ thua üò¢\nüíêB·∫°n b·ªã tr·ª´ ${coin} ƒë√¥\nüåºT·ª´ s·ªë ti·ªÅn c∆∞·ª£c.\nüê∏B·∫°n ch·ªçn: ${userChoice}\nüê≥Nh√† c√°i v·ªÅ 2 k·∫øt qu·∫£\nüåàTrong ƒë√≥ c√≥ : ${slotItems[winnerNhaCai]}`;
            }      
            api.sendMessage(  { attachment: fs.createReadStream(imagePath), body: resultMessage, }, threadID,
                (error, info) => {
                    if (error) {
                        console.error("Error while sending message:", error);
                    }
                    fs.unlinkSync(imagePath); // Delete the image after it has been sent
                }
            );
        });
    });
}

module.exports.run = async function ({ api, event, args, Currencies }) {
    // L·∫•y d·ªØ li·ªáu t·ª´ ng∆∞·ªùi ch∆°i
    let input = args[0]?.toLowerCase(); // Chuy·ªÉn ƒë·ªïi th√†nh ch·ªØ th∆∞·ªùng ƒë·ªÉ d·ªÖ so s√°nh
    let coin = parseInt(args[1]);
    if (!input || !coin || isNaN(coin) || coin <= 0) {
        return api.sendMessage(
            `Vui l√≤ng nh·∫≠p l·ª±a ch·ªçn (nai, b·∫ßu, g√†, c√°, cua, t√¥m) v√† s·ªë ti·ªÅn mu·ªën c∆∞·ª£c (v√≠ d·ª•: /baucuaca t√¥m 2000)`,
            event.threadID,
            event.messageID
        );
    }
    if (!slotItems.includes(input)) {
        return api.sendMessage(`L·ª±a ch·ªçn c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá`, event.threadID, event.messageID);
    }
    let data = await Currencies.getData(event.senderID);
    let userBalance = data.money || 0;
    if (coin < 50) {
        return api.sendMessage(`S·ªë ti·ªÅn ƒë·∫∑t c∆∞·ª£c c·ªßa b·∫°n qu√° nh·ªè, t·ªëi thi·ªÉu l√† 50 ƒë√¥!`, event.threadID, event.messageID);
    }
    if (coin > userBalance) {
        return api.sendMessage(`S·ªë d∆∞ kh√¥ng ƒë·ªß 50 ƒë√¥ ƒë·ªÉ ch∆°i b·∫ßu cua`, event.threadID, event.messageID);
    }
    // L·∫Øc x√≠ ng·∫ßu cho nh√† c√°i v√† ng∆∞·ªùi ch∆°i
    let numberNguoiChoi = Math.floor(Math.random() * slotItems.length);
    let numberNhaCai = Math.floor(Math.random() * slotItems.length);
    let nguoichoi = slotItems[numberNguoiChoi];
    let nhacai = slotItems[numberNhaCai];
    // X·ª≠ l√Ω k·∫øt qu·∫£ v√† th·ª±c hi·ªán ch·ª©c nƒÉng c·ªßa tr√≤ ch∆°i b·∫ßu cua
    let userWin = nguoichoi === input;
    api.sendMessage(`üåü Vui l√≤ng ch·ªù\nƒêang l·∫Øc nh√©...`, event.threadID, (error, messageInfo) => {
       setTimeout(() => {
            // G·ªçi h√†m v·∫Ω canvas v√† x·ª≠ l√Ω k·∫øt qu·∫£
            drawCanvas(numberNhaCai, coin, numberNguoiChoi, userWin, nhacai, input, api, event.threadID, event.messageID);
            // Tr·ª´ ti·ªÅn c·ªßa ng∆∞·ªùi ch∆°i n·∫øu nh√† c√°i th·∫Øng, c·ªông ti·ªÅn n·∫øu ng∆∞·ªùi ch∆°i th·∫Øng
            if (nhacai === input) {
                // N·∫øu ng∆∞·ªùi ch∆°i thua
                userBalance -= coin;
            } else {
                // N·∫øu ng∆∞·ªùi ch∆°i th·∫Øng
                userBalance += coin;
            }
            Currencies.setData(event.senderID, { money: userBalance });
        }, 5000); // ƒê·ª£i 5 gi√¢y (5000 millisecond) tr∆∞·ªõc khi th·ª±c hi·ªán h√†nh ƒë·ªông
    });
};